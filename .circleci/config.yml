version: 2.1
orbs:

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: cimg/node:18.16.0
    - image: cimg/postgres:14.1
    - image: rabbitmq:3.13.0-rc.1-alpine
      environment:
        RABBITMQ_DEFAULT_USER: user
        RABBITMQ_DEFAULT_PASS: password
        AMQP_URL: amqp://user:password@127.0.0.1:5672

commands:
  install_dependencies:
    steps:
      - run:
          name: Install node dependencies from package-lock
          command: npm ci
  setup_prisma:
    steps:
      - run:
          name: Generate prisma model
          command: npx prisma generate
      - run:
          name: Generate and apply migration
          command: npx prisma migrate dev
  create_envs:
    steps:
      - run:
          name: Create .env file
          command: |
            cat > .env \<< EOF
            APP_IMAGE_NAME="$APP_IMAGE_NAME"
            BCRYPT_SALT_ROUNDS="$BCRYPT_SALT_ROUNDS"
            DATABASE_URL="$DATABASE_URL"
            JWT_EXPIRY_TIME="$JWT_EXPIRY_TIME"
            JWT_PASSWORD_RESET_SECRET="$JWT_PASSWORD_RESET_SECRET"
            JWT_PASSWORD_RESET_TIME="$JWT_PASSWORD_RESET_TIME"
            JWT_PAT_SECRET="$JWT_PAT_SECRET"
            JWT_SECRET="$JWT_SECRET"
            POSTGRES_PASSWORD="$POSTGRES_PASSWORD"
            POSTGRES_PORT="$POSTGRES_PORT"
            POSTGRES_USER="$POSTGRES_USER"
            RABBITMQ_ADDRESS="$RABBITMQ_ADDRESS"
            EOF
            cat .env > test.env

jobs:
  setup_project:
    <<: *defaults
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          key: ${CACHE_VERSION}-deps-{{ checksum "package-lock.json" }}
      - install_dependencies
      - save_cache:
          paths:
            - './node_modules'
          key: ${CACHE_VERSION}-deps-{{ checksum "package-lock.json" }}

  unit_test:
    <<: *defaults
    resource_class: small
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          key: ${CACHE_VERSION}-deps-{{ checksum "package-lock.json" }}
      - create_envs
      - setup_remote_docker:
          version: 20.10.14
      - setup_prisma
      - run:
          name: Run unit tests
          command: |
            UNIT_TEST_FILES=$(circleci tests glob "./src/**/*.spec.ts" | circleci tests split --split-by=timings)
            npm test -- $UNIT_TEST_FILES
      - store_test_results:
          path: ./test_reports

  e2e_test:
    <<: *defaults
    resource_class: small
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          key: ${CACHE_VERSION}-deps-{{ checksum "package-lock.json" }}
      - create_envs
      - setup_remote_docker:
          version: 20.10.14
      - setup_prisma
      - run:
          name: Run e2e tests
          command: |
            E2E_TEST_FILES=$(circleci tests glob "./test/*{e2e-spec}.ts" | circleci tests split --split-by=timings)
            npm test -- $E2E_TEST_FILES --config ./test/jest-e2e.json
      - store_test_results:
          path: ./test_reports

  release:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - install_dependencies
      - run: HUSKY=0 npx semantic-release

  deploy:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - add_ssh_keys:
          fingerprints:
            - 'b7:b2:8e:75:20:87:ae:53:f5:da:a1:09:47:26:14:c1'
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build App image
          command: docker build -t $APP_IMAGE_NAME .
      - run:
          name: Save built image
          command: docker save $APP_IMAGE_NAME | gzip > $APP_IMAGE_NAME.tar.gz
      - create_envs
      - run:
          name: Send production env
          command: |
            scp -o StrictHostKeyChecking=accept-new ./.env $SSH_USER@$SSH_HOST:auth/.env
      - run:
          name: Send image to server
          command: |
            scp -o StrictHostKeyChecking=accept-new $APP_IMAGE_NAME.tar.gz $SSH_USER@$SSH_HOST:auth/$APP_IMAGE_NAME.tar.gz
      - run:
          name: Send docker compose file
          command: |
            scp -o StrictHostKeyChecking=accept-new docker-compose.yml $SSH_USER@$SSH_HOST:auth/docker-compose.yml
      - run:
          name: Deploy over SSH
          command: |
            ssh -o StrictHostKeyChecking=accept-new $SSH_USER@$SSH_HOST "./setup_recipe_app.sh"

workflows:
  setup_and_test:
    jobs:
      - setup_project:
          context: recipe-app-auth-test
      - unit_test:
          context: recipe-app-auth-test
          requires:
            - setup_project
      - e2e_test:
          context: recipe-app-auth-test
          requires:
            - setup_project
      - release:
          requires:
            - unit_test
            - e2e_test
          filters:
            branches:
              only:
                - main
  deploy:
    jobs:
      - deploy:
          context: recipe-app-auth-production
